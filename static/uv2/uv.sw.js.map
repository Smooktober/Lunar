{
  "version": 3,
  "sources": ["../src/uv.sw.js"],
  "sourcesContent": ["/*globals __uv$config*/\r\n// Users must import the config (and bundle) prior to importing uv.sw.js\r\n// This is to allow us to produce a generic bundle with no hard-coded paths.\r\n\r\n/**\r\n * @type {import('../uv').UltravioletCtor}\r\n */\r\nconst Ultraviolet = self.Ultraviolet;\r\n\r\nconst cspHeaders = [\r\n  'cross-origin-embedder-policy',\r\n  'cross-origin-opener-policy',\r\n  'cross-origin-resource-policy',\r\n  'content-security-policy',\r\n  'content-security-policy-report-only',\r\n  'expect-ct',\r\n  'feature-policy',\r\n  'origin-isolation',\r\n  'strict-transport-security',\r\n  'upgrade-insecure-requests',\r\n  'x-content-type-options',\r\n  'x-download-options',\r\n  'x-frame-options',\r\n  'x-permitted-cross-domain-policies',\r\n  'x-powered-by',\r\n  'x-xss-protection',\r\n];\r\nconst emptyMethods = ['GET', 'HEAD'];\r\n\r\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\r\n  constructor(config = __uv$config) {\r\n    super();\r\n    if (!config.bare) config.bare = '/bare/';\r\n    if (!config.prefix) config.prefix = '/service/';\r\n    this.config = config;\r\n    const addresses = (\r\n      Array.isArray(config.bare) ? config.bare : [config.bare]\r\n    ).map((str) => new URL(str, location).toString());\r\n    this.address = addresses[~~(Math.random() * addresses.length)];\r\n    /**\r\n     * @type {InstanceType<Ultraviolet['BareClient']>}\r\n     */\r\n    this.bareClient = new Ultraviolet.BareClient(this.address);\r\n  }\r\n  /**\r\n   *\r\n   * @param {Event & {request: Request}} param0\r\n   * @returns\r\n   */\r\n  async fetch({ request }) {\r\n    /**\r\n     * @type {string|void}\r\n     */\r\n    let fetchedURL;\r\n\r\n    try {\r\n      if (!request.url.startsWith(location.origin + this.config.prefix))\r\n        return await fetch(request);\r\n\r\n      const ultraviolet = new Ultraviolet(this.config, this.address);\r\n\r\n      if (typeof this.config.construct === 'function') {\r\n        this.config.construct(ultraviolet, 'service');\r\n      }\r\n\r\n      const db = await ultraviolet.cookie.db();\r\n\r\n      ultraviolet.meta.origin = location.origin;\r\n      ultraviolet.meta.base = ultraviolet.meta.url = new URL(\r\n        ultraviolet.sourceUrl(request.url)\r\n      );\r\n\r\n      const requestCtx = new RequestContext(\r\n        request,\r\n        this,\r\n        ultraviolet,\r\n        !emptyMethods.includes(request.method.toUpperCase())\r\n          ? await request.blob()\r\n          : null\r\n      );\r\n\r\n      if (ultraviolet.meta.url.protocol === 'blob:') {\r\n        requestCtx.blob = true;\r\n        requestCtx.base = requestCtx.url = new URL(\r\n          requestCtx.url.pathname\r\n        );\r\n      }\r\n\r\n      if (\r\n        request.referrer &&\r\n        request.referrer.startsWith(location.origin)\r\n      ) {\r\n        const referer = new URL(\r\n          ultraviolet.sourceUrl(request.referrer)\r\n        );\r\n\r\n        if (\r\n          requestCtx.headers.origin ||\r\n          (ultraviolet.meta.url.origin !== referer.origin &&\r\n            request.mode === 'cors')\r\n        ) {\r\n          requestCtx.headers.origin = referer.origin;\r\n        }\r\n\r\n        requestCtx.headers.referer = referer.href;\r\n      }\r\n\r\n      const cookies = (await ultraviolet.cookie.getCookies(db)) || [];\r\n      const cookieStr = ultraviolet.cookie.serialize(\r\n        cookies,\r\n        ultraviolet.meta,\r\n        false\r\n      );\r\n\r\n      requestCtx.headers['user-agent'] = navigator.userAgent;\r\n\r\n      if (cookieStr) requestCtx.headers.cookie = cookieStr;\r\n\r\n      const reqEvent = new HookEvent(requestCtx, null, null);\r\n      this.emit('request', reqEvent);\r\n\r\n      if (reqEvent.intercepted) return reqEvent.returnValue;\r\n\r\n      fetchedURL = requestCtx.blob\r\n        ? 'blob:' + location.origin + requestCtx.url.pathname\r\n        : requestCtx.url;\r\n\r\n      const response = await this.bareClient.fetch(fetchedURL, {\r\n        headers: requestCtx.headers,\r\n        method: requestCtx.method,\r\n        body: requestCtx.body,\r\n        credentials: requestCtx.credentials,\r\n        mode: location.origin !== requestCtx.address.origin ? 'cors' : requestCtx.mode,\r\n        cache: requestCtx.cache,\r\n        redirect: requestCtx.redirect,\r\n      });\r\n\r\n      const responseCtx = new ResponseContext(requestCtx, response);\r\n      const resEvent = new HookEvent(responseCtx, null, null);\r\n\r\n      this.emit('beforemod', resEvent);\r\n      if (resEvent.intercepted) return resEvent.returnValue;\r\n\r\n      for (const name of cspHeaders) {\r\n        if (responseCtx.headers[name]) delete responseCtx.headers[name];\r\n      }\r\n\r\n      if (responseCtx.headers.location) {\r\n        responseCtx.headers.location = ultraviolet.rewriteUrl(\r\n          responseCtx.headers.location\r\n        );\r\n      }\r\n\r\n      // downloads\r\n      if (request.destination === 'document') {\r\n        const header = responseCtx.headers['content-disposition'];\r\n\r\n        // validate header and test for filename\r\n        if (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\r\n          // if filename= wasn't specified then maybe the remote specified to download this as an attachment?\r\n          // if it's invalid then we can still possibly test for the attachment/inline type\r\n          const type = /^\\s*?attachment/i.test(header) ? 'attachment' : 'inline';\r\n\r\n          // set the filename\r\n          const [filename] = new URL(response.finalURL).pathname.split('/').slice(-1);\r\n\r\n          responseCtx.headers['content-disposition'] = `${type}; filename=${JSON.stringify(filename)}`;\r\n        }\r\n      }\r\n\r\n      if (responseCtx.headers['set-cookie']) {\r\n        Promise.resolve(\r\n          ultraviolet.cookie.setCookies(\r\n            responseCtx.headers['set-cookie'],\r\n            db,\r\n            ultraviolet.meta\r\n          )\r\n        ).then(() => {\r\n          self.clients.matchAll().then(function (clients) {\r\n            clients.forEach(function (client) {\r\n              client.postMessage({\r\n                msg: 'updateCookies',\r\n                url: ultraviolet.meta.url.href,\r\n              });\r\n            });\r\n          });\r\n        });\r\n        delete responseCtx.headers['set-cookie'];\r\n      }\r\n\r\n      if (responseCtx.body) {\r\n        switch (request.destination) {\r\n          case 'script':\r\n          case 'worker': {\r\n            // craft a JS-safe list of arguments\r\n            const scripts = [\r\n              ultraviolet.bundleScript,\r\n              ultraviolet.clientScript,\r\n              ultraviolet.configScript,\r\n              ultraviolet.handlerScript,\r\n            ]\r\n              .map((script) => JSON.stringify(script))\r\n              .join(',');\r\n            responseCtx.body = `if (!self.__uv && self.importScripts) { ${ultraviolet.createJsInject(\r\n              this.address,\r\n              this.bareClient.manifest,\r\n              ultraviolet.cookie.serialize(cookies, ultraviolet.meta, true),\r\n              request.referrer\r\n            )} importScripts(${scripts}); }\\n`;\r\n            responseCtx.body += ultraviolet.js.rewrite(await response.text());\r\n            break;\r\n          }\r\n          case 'style':\r\n            responseCtx.body = ultraviolet.rewriteCSS(await response.text());\r\n            break;\r\n          case 'iframe':\r\n          case 'document':\r\n            if (\r\n              isHtml(\r\n                ultraviolet.meta.url,\r\n                responseCtx.headers['content-type'] || ''\r\n              )\r\n            ) {\r\n              responseCtx.body = ultraviolet.rewriteHtml(\r\n                await response.text(),\r\n                {\r\n                  document: true,\r\n                  injectHead: ultraviolet.createHtmlInject(\r\n                    ultraviolet.handlerScript,\r\n                    ultraviolet.bundleScript,\r\n                    ultraviolet.clientScript,\r\n                    ultraviolet.configScript,\r\n                    this.address,\r\n                    this.bareClient.manifest,\r\n                    ultraviolet.cookie.serialize(cookies, ultraviolet.meta, true),\r\n                    request.referrer\r\n                  ),\r\n                }\r\n              );\r\n            }\r\n        }\r\n      }\r\n\r\n      if (requestCtx.headers.accept === 'text/event-stream') {\r\n        responseCtx.headers['content-type'] = 'text/event-stream';\r\n      }\r\n      if (crossOriginIsolated) {\r\n        responseCtx.headers['Cross-Origin-Embedder-Policy'] = 'require-corp';\r\n      }\r\n\r\n      this.emit('response', resEvent);\r\n      if (resEvent.intercepted) return resEvent.returnValue;\r\n\r\n      return new Response(responseCtx.body, {\r\n        headers: responseCtx.headers,\r\n        status: responseCtx.status,\r\n        statusText: responseCtx.statusText,\r\n      });\r\n    } catch (err) {\r\n      if (!['document', 'iframe'].includes(request.destination))\r\n        return new Response(undefined, { status: 500 });\r\n\r\n      console.error(err);\r\n\r\n      return renderError(err, fetchedURL, this.address);\r\n    }\r\n  }\r\n  static Ultraviolet = Ultraviolet;\r\n}\r\n\r\nself.UVServiceWorker = UVServiceWorker;\r\n\r\nclass ResponseContext {\r\n  /**\r\n   *\r\n   * @param {RequestContext} request\r\n   * @param {import(\"@tomphttp/bare-client\").BareResponseFetch} response\r\n   */\r\n  constructor(request, response) {\r\n    this.request = request;\r\n    this.raw = response;\r\n    this.ultraviolet = request.ultraviolet;\r\n    this.headers = {};\r\n    // eg set-cookie\r\n    for (const key in response.rawHeaders)\r\n      this.headers[key.toLowerCase()] = response.rawHeaders[key];\r\n    this.status = response.status;\r\n    this.statusText = response.statusText;\r\n    this.body = response.body;\r\n  }\r\n  get url() {\r\n    return this.request.url;\r\n  }\r\n  get base() {\r\n    return this.request.base;\r\n  }\r\n  set base(val) {\r\n    this.request.base = val;\r\n  }\r\n}\r\n\r\nclass RequestContext {\r\n  /**\r\n   *\r\n   * @param {Request} request\r\n   * @param {UVServiceWorker} worker\r\n   * @param {Ultraviolet} ultraviolet\r\n   * @param {BodyInit} body\r\n   */\r\n  constructor(request, worker, ultraviolet, body = null) {\r\n    this.ultraviolet = ultraviolet;\r\n    this.request = request;\r\n    this.headers = Object.fromEntries(request.headers.entries());\r\n    this.method = request.method;\r\n    this.address = worker.address;\r\n    this.body = body || null;\r\n    this.cache = request.cache;\r\n    this.redirect = request.redirect;\r\n    this.credentials = 'omit';\r\n    this.mode = request.mode === 'cors' ? request.mode : 'same-origin';\r\n    this.blob = false;\r\n  }\r\n  get url() {\r\n    return this.ultraviolet.meta.url;\r\n  }\r\n  set url(val) {\r\n    this.ultraviolet.meta.url = val;\r\n  }\r\n  get base() {\r\n    return this.ultraviolet.meta.base;\r\n  }\r\n  set base(val) {\r\n    this.ultraviolet.meta.base = val;\r\n  }\r\n}\r\n\r\nfunction isHtml(url, contentType = '') {\r\n  return (\r\n    (Ultraviolet.mime.contentType(contentType || url.pathname) ||\r\n      'text/html').split(';')[0] === 'text/html'\r\n  );\r\n}\r\n\r\nclass HookEvent {\r\n  #intercepted;\r\n  #returnValue;\r\n  constructor(data = {}, target = null, that = null) {\r\n    this.#intercepted = false;\r\n    this.#returnValue = null;\r\n    this.data = data;\r\n    this.target = target;\r\n    this.that = that;\r\n  }\r\n  get intercepted() {\r\n    return this.#intercepted;\r\n  }\r\n  get returnValue() {\r\n    return this.#returnValue;\r\n  }\r\n  respondWith(input) {\r\n    this.#returnValue = input;\r\n    this.#intercepted = true;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} fetchedURL\r\n * @param {string} bareServer\r\n * @returns\r\n */\r\nfunction hostnameErrorTemplate(fetchedURL, bareServer) {\r\n  const parsedFetchedURL = new URL(fetchedURL);\r\n  const script =\r\n    `remoteHostname.textContent = ${JSON.stringify(\r\n      parsedFetchedURL.hostname\r\n    )};` +\r\n    `bareServer.href = ${JSON.stringify(bareServer)};` +\r\n    `uvHostname.textContent = ${JSON.stringify(location.hostname)};` +\r\n    `reload.addEventListener(\"click\", () => location.reload());` +\r\n    `uvVersion.textContent = ${JSON.stringify(\r\n      process.env.ULTRAVIOLET_VERSION\r\n    )};`;\r\n\r\n    return (\r\n      '<!DOCTYPE html>' +\r\n      '<html>' +\r\n      '<head>' +\r\n      \"<meta charset='utf-8' />\" +\r\n      '<title>Error</title>' +\r\n      '<link rel=\"stylesheet\" href=\"uv.styles.css\"/>' +\r\n      '</head>' +\r\n      '<body>' +\r\n      '<h1>This site can\u2019t be reached</h1>' +\r\n      '<hr />' +\r\n      '<p><b id=\"remoteHostname\"></b>\u2019s server IP address could not be found.</p>' +\r\n      '<p>Try:</p>' +\r\n      '<ul>' +\r\n      '<li>Verifying you entered the correct address</li>' +\r\n      '<li>Clearing the site data</li>' +\r\n      '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\r\n      \"<li>Verifying the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\r\n      '</ul>' +\r\n      '<button id=\"reload\">Reload</button>' +\r\n      '<hr />' +\r\n      '<p><i>Ultraviolet (Sodium Hybrid) v<span id=\"uvVersion\"></span></i></p>' +\r\n      `<script src=\"${\r\n        'data:application/javascript,' + encodeURIComponent(script)\r\n      }\"></script>` +\r\n      '</body>' +\r\n      '</html>'\r\n    );    \r\n}\r\n\r\n/**\r\n *\r\n * @param {string} title\r\n * @param {string} code\r\n * @param {string} id\r\n * @param {string} message\r\n * @param {string} trace\r\n * @param {string} fetchedURL\r\n * @param {string} bareServer\r\n * @returns\r\n */\r\nfunction errorTemplate(\r\n  title,\r\n  code,\r\n  id,\r\n  message,\r\n  trace,\r\n  fetchedURL,\r\n  bareServer\r\n) {\r\n  // produced by bare-server-node\r\n  if (message === 'The specified host could not be resolved.')\r\n    return hostnameErrorTemplate(fetchedURL, bareServer);\r\n\r\n  // turn script into a data URI so we don't have to escape any HTML values\r\n  const script =\r\n    `errorTitle.textContent = ${JSON.stringify(title)};` +\r\n    `errorCode.textContent = ${JSON.stringify(code)};` +\r\n    (id ? `errorId.textContent = ${JSON.stringify(id)};` : '') +\r\n    `errorMessage.textContent =  ${JSON.stringify(message)};` +\r\n    `errorTrace.value = ${JSON.stringify(trace)};` +\r\n    `fetchedURL.textContent = ${JSON.stringify(fetchedURL)};` +\r\n    `bareServer.href = ${JSON.stringify(bareServer)};` +\r\n    `for (const node of document.querySelectorAll(\"#uvHostname\")) node.textContent = ${JSON.stringify(\r\n      location.hostname\r\n    )};` +\r\n    `reload.addEventListener(\"click\", () => location.reload());` +\r\n    `uvVersion.textContent = ${JSON.stringify(\r\n      process.env.ULTRAVIOLET_VERSION\r\n    )};`;\r\n\r\n  return (\r\n    '<!DOCTYPE html>' +\r\n    '<html>' +\r\n    '<head>' +\r\n    \"<meta charset='utf-8' />\" +\r\n    '<title>Error</title>' +\r\n    '<link rel=\"stylesheet\" href=\"uv.styles.css\"/>' +\r\n    '</head>' +\r\n    '<body>' +\r\n    \"<h1 id='errorTitle'></h1>\" +\r\n    '<hr />' +\r\n    '<p>Failed to load <b id=\"fetchedURL\"></b></p>' +\r\n    '<p id=\"errorMessage\"></p>' +\r\n    '<table><tbody>' +\r\n    '<tr><td>Code:</td><td id=\"errorCode\"></td></tr>' +\r\n    (id ? '<tr><td>ID:</td><td id=\"errorId\"></td></tr>' : '') +\r\n    '</tbody></table>' +\r\n    '<textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>' +\r\n    '<p>Try:</p>' +\r\n    '<ul>' +\r\n    '<li>Checking your internet connection</li>' +\r\n    '<li>Verifying you entered the correct address</li>' +\r\n    '<li>Clearing the site data</li>' +\r\n    '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\r\n    \"<li>Verify the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\r\n    '</ul>' +\r\n    '<p>If you\\'re the administrator of <b id=\"uvHostname\"></b>, try:</p>' +\r\n    '<ul>' +\r\n    '<li>Restarting your Bare server</li>' +\r\n    '<li>Updating Ultraviolet</li>' +\r\n    '<li>Troubleshooting the error on the <a href=\"https://github.com/titaniumnetwork-dev/Ultraviolet\" target=\"_blank\">GitHub repository</a></li>' +\r\n    '</ul>' +\r\n    '<button id=\"reload\">Reload</button>' +\r\n    '<hr />' +\r\n    '<p><i>Ultraviolet (Sodium Hybrid) v<span id=\"uvVersion\"></span></i></p>' +\r\n    `<script src=\"${\r\n      'data:application/javascript,' + encodeURIComponent(script)\r\n    }\"></script>` +\r\n    '</body>' +\r\n    '</html>'\r\n  );\r\n}\r\n\r\n/**\r\n * @typedef {import(\"@tomphttp/bare-client\").BareError} BareError\r\n */\r\n\r\n/**\r\n *\r\n * @param {unknown} err\r\n * @returns {err is BareError}\r\n */\r\nfunction isBareError(err) {\r\n  return err instanceof Error && typeof err.body === 'object';\r\n}\r\n\r\n/**\r\n *\r\n * @param {unknown} err\r\n * @param {string} fetchedURL\r\n * @param {string} bareServer\r\n */\r\nfunction renderError(err, fetchedURL, bareServer) {\r\n  /**\r\n   * @type {number}\r\n   */\r\n  let status;\r\n  /**\r\n   * @type {string}\r\n   */\r\n  let title;\r\n  /**\r\n   * @type {string}\r\n   */\r\n  let code;\r\n  let id = '';\r\n  /**\r\n   * @type {string}\r\n   */\r\n  let message;\r\n\r\n  if (isBareError(err)) {\r\n    status = err.status;\r\n    title = 'Error communicating with the Bare server';\r\n    message = err.body.message;\r\n    code = err.body.code;\r\n    id = err.body.id;\r\n  } else {\r\n    status = 500;\r\n    title = 'Error processing your request';\r\n    message = 'Internal Server Error';\r\n    code = err instanceof Error ? err.name : 'UNKNOWN';\r\n  }\r\n\r\n  return new Response(\r\n    errorTemplate(\r\n      title,\r\n      code,\r\n      id,\r\n      message,\r\n      String(err),\r\n      fetchedURL,\r\n      bareServer\r\n    ),\r\n    {\r\n      status,\r\n      headers: {\r\n        'content-type': 'text/html',\r\n      },\r\n    }\r\n  );\r\n}\r\n\r\n// CSS loading functionality\r\nself.addEventListener('install', (event) => {\r\n  event.waitUntil(\r\n    caches.open('uv-assets').then((cache) => {\r\n      return cache.addAll([\r\n        'uv.styles.css', // Replace with the actual CSS file path\r\n      ]);\r\n    })\r\n  );\r\n});\r\n\r\nself.addEventListener('fetch', (event) => {\r\n  event.respondWith(\r\n    caches.match(event.request).then((response) => {\r\n      return response || fetch(event.request);\r\n    })\r\n  );\r\n});\r\n"],
  "mappings": "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",
  "names": ["Ultraviolet", "cspHeaders", "emptyMethods", "UVServiceWorker", "config", "addresses", "str", "request", "fetchedURL", "ultraviolet", "db", "requestCtx", "RequestContext", "referer", "cookies", "cookieStr", "reqEvent", "HookEvent", "response", "responseCtx", "ResponseContext", "resEvent", "name", "header", "type", "filename", "clients", "client", "scripts", "script", "isHtml", "err", "renderError", "key", "val", "worker", "body", "url", "contentType", "#intercepted", "#returnValue", "data", "target", "that", "input", "hostnameErrorTemplate", "bareServer", "parsedFetchedURL", "errorTemplate", "title", "code", "id", "message", "trace", "isBareError", "status", "event", "cache"]
}
